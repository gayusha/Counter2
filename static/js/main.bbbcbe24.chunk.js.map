{"version":3,"sources":["CountBtn.js","CountBtn1.js","CountBtn2.js","CountBar.js","App.js","serviceWorker.js","index.js"],"names":["CountBtn","props","onClick","updateCounter","value","count","CountBtn1","updateCounter1","value1","count1","CountBtn2","updateCounter2","value2","count2","CountBar","useState","setCount","n","App","countBars","setCountBars","setCount1","setCount2","n1","n2","items","i","push","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bbbcbe24.chunk.js","sourcesContent":["import React from 'react';\n\nfunction CountBtn(props) {\n\n    const send = () => {\n        props.updateCounter(props.value + props.count)\n\n    }\n    return (\n\n        <button onClick={send}>{props.value}</button>\n    );\n}\n\nexport default CountBtn;\n","import React from 'react';\n\nfunction CountBtn1(props) {\n\n    const send1 = () => {\n        props.updateCounter1(props.value1 + props.count1)\n\n    }\n    return (\n\n        <button onClick={send1}>{props.value1}</button>\n    );\n}\n\nexport default CountBtn1;\n","import React from 'react';\n\nfunction CountBtn2(props) {\n\n    const send2 = () => {\n        props.updateCounter2(props.value2 + props.count2)\n\n    }\n    return (\n\n        <button onClick={send2}>{props.value2}</button>\n    );\n}\n\nexport default CountBtn2;\n","import React, {useState} from 'react';\nimport CountBtn from \"./CountBtn\";\n\nfunction CountBar() {\n\n    const [count, setCount] = useState(7)\n\n    const updateCounter = (n) => {\n        setCount(n);\n    }\n\n    return (\n        <div>\n            <CountBtn value={-1} count={count} updateCounter={updateCounter}/>\n            <CountBtn value={-2} count={count} updateCounter={updateCounter}/>\n            <CountBtn value={-3} count={count} updateCounter={updateCounter}/>\n            <strong> {count} </strong>\n            <CountBtn value={+3} count={count} updateCounter={updateCounter}/>\n            <CountBtn value={+2} count={count} updateCounter={updateCounter}/>\n            <CountBtn value={+1} count={count} updateCounter={updateCounter}/>\n        </div>\n    );\n}\n\nexport default CountBar;\n","import React, {useState} from 'react';\nimport CountBtn from \"./CountBtn\";\nimport CountBtn1 from \"./CountBtn1\";\nimport CountBtn2 from \"./CountBtn2\";\nimport CountBar from \"./CountBar\";\n\n\nfunction App() {\n\n    const [countBars, setCountBars] = useState(0)\n    const [count, setCount] = useState(7)\n    const [count1, setCount1] = useState(7)\n    const [count2, setCount2] = useState(7)\n\n    const addCountBar = () => {\n        setCountBars(countBars + 1)\n    }\n    const deleteCountBar = () => {\n        setCountBars(countBars - 1)\n    }\n\n    const updateCounter = (n) => {\n        setCount(n);\n    }\n    const updateCounter1 = (n1) => {\n        setCount1(n1);\n    }\n    const updateCounter2 = (n2) => {\n        setCount2(n2);\n    }\n\n    const items = [];\n    for (let i = 0; i < countBars; i++) {\n        items.push(<CountBar/>)\n    }\n\n    return (\n\n        <div className=\"App\">\n\n            <hr/>\n            <strong>COUNTER</strong>\n            <hr/>\n\n            <CountBtn value={-1} count={count} updateCounter={updateCounter}/>\n            <CountBtn value={-2} count={count} updateCounter={updateCounter}/>\n            <CountBtn value={-3} count={count} updateCounter={updateCounter}/>\n\n            <strong> {count} </strong>\n\n            <CountBtn value={+3} count={count} updateCounter={updateCounter}/>\n            <CountBtn value={+2} count={count} updateCounter={updateCounter}/>\n            <CountBtn value={+1} count={count} updateCounter={updateCounter}/>\n\n            <br/>\n\n            <CountBtn1 value1={-1} count1={count1} updateCounter1={updateCounter1}/>\n            <CountBtn1 value1={-2} count1={count1} updateCounter1={updateCounter1}/>\n            <CountBtn1 value1={-3} count1={count1} updateCounter1={updateCounter1}/>\n\n            <strong> {count1} </strong>\n\n            <CountBtn1 value1={+3} count1={count1} updateCounter1={updateCounter1}/>\n            <CountBtn1 value1={+2} count1={count1} updateCounter1={updateCounter1}/>\n            <CountBtn1 value1={+1} count1={count1} updateCounter1={updateCounter1}/>\n\n            <br/>\n\n            <CountBtn2 value2={-1} count2={count2} updateCounter2={updateCounter2}/>\n            <CountBtn2 value2={-2} count2={count2} updateCounter2={updateCounter2}/>\n            <CountBtn2 value2={-3} count2={count2} updateCounter2={updateCounter2}/>\n\n            <strong> {count2} </strong>\n\n            <CountBtn2 value2={+3} count2={count2} updateCounter2={updateCounter2}/>\n            <CountBtn2 value2={+2} count2={count2} updateCounter2={updateCounter2}/>\n            <CountBtn2 value2={+1} count2={count2} updateCounter2={updateCounter2}/>\n\n            <hr/>\n\n            {items}\n\n            <button className=\"add\" onClick={addCountBar}>ADD</button>\n            <button className=\"add\" onClick={deleteCountBar}>DEL</button>\n\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}